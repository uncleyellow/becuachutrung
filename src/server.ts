import express, { Application, Request, Response } from "express";
import { google } from "googleapis";
import dotenv from "dotenv";
import swaggerJsDoc from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";
import cors from "cors";

dotenv.config();

const app: Application = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json()); // H·ªó tr·ª£ JSON payload trong body request

// Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if (!process.env.GOOGLE_CREDENTIALS || !process.env.GOOGLE_SHEET_ID) {
  console.error("‚ùå Thi·∫øu GOOGLE_CREDENTIALS ho·∫∑c GOOGLE_SHEET_ID trong .env");
  process.exit(1);
}

// C·∫•u h√¨nh x√°c th·ª±c Google Sheets
const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS || "{}");

const auth = new google.auth.GoogleAuth({
  credentials,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const sheets = google.sheets({ version: "v4", auth });

// C·∫•u h√¨nh Swagger
const swaggerOptions = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "Google Sheets API",
      version: "1.0.0",
      description: "API ƒë·ªÉ ƒë·ªçc v√† ghi d·ªØ li·ªáu v√†o Google Sheets",
    },
    servers: [
      {
        url: process.env.RAILWAY_PUBLIC_URL || `http://localhost:${PORT}`,
      },
    ],
  },
  apis: ["./src/server.ts"], // Ch·ªâ ƒë·ªãnh c√°c file ch·ª©a API docs
};

const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));

/**
 * @swagger
 * /data:
 *   get:
 *     summary: L·∫•y d·ªØ li·ªáu t·ª´ Google Sheets
 *     responses:
 *       200:
 *         description: D·ªØ li·ªáu l·∫•y th√†nh c√¥ng
 *       500:
 *         description: L·ªói server
 */
app.get("/data", async (req: Request, res: Response): Promise<void> => {
  try {
    const sheetId = process.env.GOOGLE_SHEET_ID;
    const range = "sum!A5:P8";

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: sheetId,
      range: range,
    });

    const rows = response.data.values;
    if (!rows) {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu" });
      return;
    }

    res.json({ data: rows });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
});

/**
 * @swagger
 * /write:
 *   post:
 *     summary: Ghi d·ªØ li·ªáu v√†o Google Sheets
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               rowIndex:
 *                 type: integer
 *                 description: S·ªë h√†ng c·∫ßn c·∫≠p nh·∫≠t (t·ªëi thi·ªÉu 6)
 *               values:
 *                 type: array
 *                 items:
 *                   type: string
 *                 description: D·ªØ li·ªáu c·∫ßn ghi
 *             example:
 *               rowIndex: 6
 *               values: ["2025-03-31T12:00", "2025-03-31T14:00", "120 ph√∫t"]
 *     responses:
 *       200:
 *         description: D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi v√†o Google Sheets
 *       400:
 *         description: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
 *       500:
 *         description: L·ªói server
 */
app.post("/write", async (req: Request, res: Response): Promise<void> => {
  try {
    const { rowIndex, values } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!rowIndex || !Array.isArray(values) || rowIndex < 6) {
      res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, rowIndex ph·∫£i ‚â• 6" });
      return;
    }

    const sheetId = process.env.GOOGLE_SHEET_ID;
    const range = `sum!E${rowIndex}:G${rowIndex}`; // Ghi v√†o c·ªôt E, F, G

    await sheets.spreadsheets.values.update({
      spreadsheetId: sheetId,
      range: range,
      valueInputOption: "USER_ENTERED",
      requestBody: { values: [values] },
    });

    res.json({ message: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t h√†ng ${rowIndex} trong Google Sheets` });
  } catch (error) {
    console.error("‚ùå L·ªói khi ghi d·ªØ li·ªáu v√†o Google Sheets:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
});

// Ch·∫°y server
app.listen(PORT, () => {
  console.log(`üöÄ Server ch·∫°y t·∫°i: http://localhost:${PORT}`);
  console.log(`üìñ Swagger UI: http://localhost:${PORT}/api-docs`);
});
